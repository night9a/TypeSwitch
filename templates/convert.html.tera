<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TypeSwitch - File Converter</title>
    <style>
        :root {
            --primary: #F97316;
            --primary-dark: #EA580C;
            --accent: #FACC15;
            --text: #1E293B;
            --bg: #F9F5EC;
            --dark-navy: #1F2937;
            --success: #10B981;
            --error: #EF4444;
            --warning: #F59E0B;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: var(--bg);
            color: var(--text);
            overflow-x: hidden;
            min-height: 100vh;
        }

        /* Animated Background */
        .bg-animation {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            opacity: 0.03;
        }

        .file-particle {
            position: absolute;
            width: 6px;
            height: 8px;
            background: var(--primary);
            border-radius: 2px;
            animation: floatFiles 12s ease-in-out infinite;
        }

        @keyframes floatFiles {
            0%, 100% { transform: translateY(0px) rotate(0deg); opacity: 0.3; }
            25% { transform: translateY(-20px) rotate(90deg); opacity: 0.6; }
            50% { transform: translateY(-40px) rotate(180deg); opacity: 0.8; }
            75% { transform: translateY(-20px) rotate(270deg); opacity: 0.6; }
        }

        /* Header */
        header {
            background: rgba(249, 245, 236, 0.95);
            backdrop-filter: blur(15px);
            padding: 1rem 0;
            border-bottom: 1px solid rgba(249, 115, 22, 0.1);
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            font-size: 1.6rem;
            font-weight: 700;
            color: var(--primary);
        }

        .rocket-logo {
            width: 40px;
            height: 40px;
            animation: rocketHover 3s ease-in-out infinite;
        }

        @keyframes rocketHover {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-3px); }
        }

        .nav-links {
            display: flex;
            list-style: none;
            gap: 2rem;
        }

        .nav-links a {
            text-decoration: none;
            color: var(--text);
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .nav-links a:hover {
            color: var(--primary);
        }

        /* Main Container */
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Page Title */
        .page-title {
            text-align: center;
            margin-bottom: 3rem;
        }

        .page-title h1 {
            font-size: 3rem;
            background: linear-gradient(45deg, var(--primary), var(--primary-dark));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 1rem;
            font-weight: 800;
        }

        .page-title p {
            font-size: 1.2rem;
            color: var(--text);
            opacity: 0.7;
        }

        /* Converter Section */
        .converter-section {
            background: white;
            border-radius: 25px;
            padding: 3rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            margin-bottom: 3rem;
            border: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .converter-section:hover {
            border-color: var(--primary);
            box-shadow: 0 15px 40px rgba(249, 115, 22, 0.15);
        }

        /* Drop Zone */
        .drop-zone {
            border: 3px dashed var(--primary);
            border-radius: 20px;
            padding: 3rem;
            text-align: center;
            background: var(--bg);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            margin-bottom: 2rem;
        }

        .drop-zone.dragover {
            background: rgba(249, 115, 22, 0.1);
            border-color: var(--primary-dark);
            transform: scale(1.02);
        }

        .drop-zone-content {
            position: relative;
            z-index: 2;
        }

        .upload-icon {
            font-size: 4rem;
            color: var(--primary);
            margin-bottom: 1rem;
            animation: uploadBounce 2s ease-in-out infinite;
        }

        @keyframes uploadBounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }

        .drop-zone h3 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: var(--text);
        }

        .drop-zone p {
            color: var(--text);
            opacity: 0.7;
            margin-bottom: 1.5rem;
        }

        .upload-button {
            background: linear-gradient(45deg, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .upload-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(249, 115, 22, 0.4);
        }

        .upload-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.6s ease;
        }

        .upload-button:hover::before {
            left: 100%;
        }

        .file-input {
            display: none;
        }

        /* Format Selection */
        .format-selection {
            display: grid;
            grid-template-columns: 1fr auto 1fr;
            gap: 2rem;
            align-items: center;
            margin-bottom: 2rem;
        }

        .format-group {
            text-align: center;
        }

        .format-group label {
            display: block;
            font-weight: 600;
            color: var(--text);
            margin-bottom: 0.5rem;
        }

        .format-select {
            width: 100%;
            padding: 1rem;
            border: 2px solid var(--primary);
            border-radius: 15px;
            font-size: 1rem;
            background: white;
            color: var(--text);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .format-select:focus {
            outline: none;
            border-color: var(--primary-dark);
            box-shadow: 0 0 0 3px rgba(249, 115, 22, 0.2);
        }

        .conversion-arrow {
            font-size: 2rem;
            color: var(--primary);
            animation: arrowPulse 2s ease-in-out infinite;
        }

        @keyframes arrowPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }

        /* File List */
        .file-list {
            margin-top: 2rem;
        }

        .file-item {
            background: var(--bg);
            border: 2px solid transparent;
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: all 0.3s ease;
            animation: slideInUp 0.4s ease-out;
        }

        .file-item:hover {
            border-color: var(--primary);
            transform: translateY(-2px);
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .file-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(45deg, var(--primary), var(--accent));
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            color: white;
            font-weight: 600;
            flex-shrink: 0;
        }

        .file-info {
            flex: 1;
        }

        .file-name {
            font-weight: 600;
            color: var(--text);
            margin-bottom: 0.25rem;
        }

        .file-details {
            font-size: 0.9rem;
            color: var(--text);
            opacity: 0.6;
        }

        .file-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .status-ready { color: var(--primary); }
        .status-converting { color: var(--warning); }
        .status-success { color: var(--success); }
        .status-error { color: var(--error); }

        .file-actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            background: none;
            border: 2px solid var(--primary);
            color: var(--primary);
            padding: 0.5rem 1rem;
            border-radius: 25px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            background: var(--primary);
            color: white;
        }

        .action-btn.remove {
            border-color: var(--error);
            color: var(--error);
        }

        .action-btn.remove:hover {
            background: var(--error);
            color: white;
        }

        /* Progress Bar */
        .progress-bar {
            width: 100%;
            height: 6px;
            background: rgba(249, 115, 22, 0.2);
            border-radius: 3px;
            overflow: hidden;
            margin-top: 0.5rem;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(45deg, var(--primary), var(--accent));
            border-radius: 3px;
            transition: width 0.3s ease;
            animation: progressShine 2s ease-in-out infinite;
        }

        @keyframes progressShine {
            0% { background-position: -200px 0; }
            100% { background-position: 200px 0; }
        }

        /* Convert Button */
        .convert-section {
            text-align: center;
            margin-top: 2rem;
        }

        .convert-button {
            background: linear-gradient(45deg, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            padding: 1.2rem 3rem;
            border-radius: 50px;
            font-size: 1.2rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            disabled: false;
        }

        .convert-button:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(249, 115, 22, 0.4);
        }

        .convert-button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }

        .convert-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.6s ease;
        }

        .convert-button:hover:not(:disabled)::before {
            left: 100%;
        }

        /* Quick Actions */
        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-top: 3rem;
        }

        .quick-action {
            background: white;
            border: 2px solid transparent;
            border-radius: 15px;
            padding: 1.5rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .quick-action:hover {
            border-color: var(--primary);
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(249, 115, 22, 0.15);
        }

        .quick-action-icon {
            font-size: 2rem;
            margin-bottom: 1rem;
        }

        .quick-action h3 {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
            color: var(--text);
        }

        .quick-action p {
            color: var(--text);
            opacity: 0.7;
            font-size: 0.9rem;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }

            .page-title h1 {
                font-size: 2rem;
            }

            .converter-section {
                padding: 2rem;
            }

            .format-selection {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .conversion-arrow {
                transform: rotate(90deg);
            }

            .file-item {
                flex-direction: column;
                text-align: center;
            }

            .nav-links {
                display: none;
            }

            .quick-actions {
                grid-template-columns: 1fr;
            }
        }

        /* Loading Animation */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255,255,255,0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Success Message */
        .success-message {
            background: linear-gradient(45deg, var(--success), #059669);
            color: white;
            padding: 1rem;
            border-radius: 15px;
            margin-top: 1rem;
            text-align: center;
            animation: slideInDown 0.5s ease-out;
        }

        @keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
    <div class="bg-animation">
        <div class="file-particle" style="top: 10%; left: 5%; animation-delay: 0s;"></div>
        <div class="file-particle" style="top: 20%; left: 90%; animation-delay: -2s;"></div>
        <div class="file-particle" style="top: 40%; left: 15%; animation-delay: -4s;"></div>
        <div class="file-particle" style="top: 60%; left: 85%; animation-delay: -1s;"></div>
        <div class="file-particle" style="top: 80%; left: 25%; animation-delay: -3s;"></div>
        <div class="file-particle" style="top: 30%; left: 70%; animation-delay: -5s;"></div>
        <div class="file-particle" style="top: 70%; left: 45%; animation-delay: -6s;"></div>
        <div class="file-particle" style="top: 50%; left: 5%; animation-delay: -7s;"></div>
    </div>

    <header>
        <nav>
            <div class="logo">
                <div class="rocket-logo">
                    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                        <path d="M50 10 L65 70 L35 70 Z" fill="#F97316" stroke="#1F2937" stroke-width="4"/>
                        <path d="M35 70 L25 85 L35 80 Z" fill="#F97316" stroke="#1F2937" stroke-width="4"/>
                        <path d="M65 70 L75 85 L65 80 Z" fill="#F97316" stroke="#1F2937" stroke-width="4"/>
                        <circle cx="50" cy="35" r="8" fill="#F9F5EC" stroke="#1F2937" stroke-width="4"/>
                        <path d="M45 70 L50 90 L55 70 Z" fill="#FACC15" stroke="#1F2937" stroke-width="3"/>
                    </svg>
                </div>
                TypeSwitch
            </div>
            <ul class="nav-links">
                <li><a href="#home">Home</a></li>
                <li><a href="#converter">Converter</a></li>
                <li><a href="#formats">Formats</a></li>
                <li><a href="#help">Help</a></li>
            </ul>
        </nav>
    </header>

    <div class="container">
        <div class="page-title">
            <h1>File Converter</h1>
            <p>Convert your files instantly with rocket speed 🚀</p>
        </div>

        <div class="converter-section">
            <div class="drop-zone" id="dropZone">
                <div class="drop-zone-content">
                    <div class="upload-icon">📁</div>
                    <h3>Drop your files here</h3>
                    <p>or click to browse and select files</p>
                    <button class="upload-button" id="uploadButton">Choose Files</button>
                    <input type="file" class="file-input" id="fileInput" multiple accept="*/*">
                </div>
            </div>

            <div class="format-selection">
                <div class="format-group">
                    <label for="fromFormat">From</label>
                    <select class="format-select" id="fromFormat">
                        <option value="auto">Auto-detect</option>
                        <option value="jpg">JPG</option>
                        <option value="png">PNG</option>
                        <option value="pdf">PDF</option>
                        <option value="docx">DOCX</option>
                        <option value="mp4">MP4</option>
                        <option value="mp3">MP3</option>
                    </select>
                </div>
                <div class="conversion-arrow">→</div>
                <div class="format-group">
                    <label for="toFormat">To</label>
                    <select class="format-select" id="toFormat">
                        <option value="jpg">JPG</option>
                        <option value="png">PNG</option>
                        <option value="pdf">PDF</option>
                        <option value="docx">DOCX</option>
                        <option value="mp4">MP4</option>
                        <option value="mp3">MP3</option>
                    </select>
                </div>
            </div>

            <div class="file-list" id="fileList"></div>

            <div class="convert-section">
                <button class="convert-button" id="convertButton" disabled>
                    <span id="convertButtonText">Select Files to Convert</span>
                </button>
            </div>
        </div>

        <div class="quick-actions">
            <div class="quick-action" onclick="setQuickConversion('jpg', 'png')">
                <div class="quick-action-icon">🖼️</div>
                <h3>JPG to PNG</h3>
                <p>Convert images to PNG format</p>
            </div>
            <div class="quick-action" onclick="setQuickConversion('pdf', 'docx')">
                <div class="quick-action-icon">📄</div>
                <h3>PDF to DOCX</h3>
                <p>Convert PDF to Word document</p>
            </div>
            <div class="quick-action" onclick="setQuickConversion('mp4', 'mp3')">
                <div class="quick-action-icon">🎵</div>
                <h3>MP4 to MP3</h3>
                <p>Extract audio from video</p>
            </div>
            <div class="quick-action" onclick="setQuickConversion('png', 'jpg')">
                <div class="quick-action-icon">🎨</div>
                <h3>PNG to JPG</h3>
                <p>Optimize images for web</p>
            </div>
        </div>
    </div>

    <script>
        let selectedFiles = [];
        let isConverting = false;

        // DOM elements
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const uploadButton = document.getElementById('uploadButton');
        const fileList = document.getElementById('fileList');
        const convertButton = document.getElementById('convertButton');
        const convertButtonText = document.getElementById('convertButtonText');
        const fromFormat = document.getElementById('fromFormat');
        const toFormat = document.getElementById('toFormat');

        // File upload handlers
        uploadButton.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', handleFileSelect);

        // Drag and drop handlers
        dropZone.addEventListener('dragover', handleDragOver);
        dropZone.addEventListener('dragleave', handleDragLeave);
        dropZone.addEventListener('drop', handleDrop);

        // Convert button handler
        convertButton.addEventListener('click', handleConvert);

        function handleDragOver(e) {
            e.preventDefault();
            dropZone.classList.add('dragover');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            dropZone.classList.remove('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            dropZone.classList.remove('dragover');
            const files = Array.from(e.dataTransfer.files);
            addFiles(files);
        }

        function handleFileSelect(e) {
            const files = Array.from(e.target.files);
            addFiles(files);
        }

        function addFiles(files) {
            files.forEach(file => {
                if (!selectedFiles.find(f => f.name === file.name && f.size === file.size)) {
                    const fileObj = {
                        file: file,
                        name: file.name,
                        size: file.size,
                        type: file.type,
                        status: 'ready',
                        progress: 0,
                        id: Date.now() + Math.random()
                    };
                    selectedFiles.push(fileObj);
                }
            });
            updateFileList();
            updateConvertButton();
        }

        function updateFileList() {
            fileList.innerHTML = '';
            selectedFiles.forEach((fileObj, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <div class="file-icon">${getFileIcon(fileObj.name)}</div>
                    <div class="file-info">
                        <div class="file-name">${fileObj.name}</div>
                        <div class="file-details">${formatFileSize(fileObj.size)} • ${getFileExtension(fileObj.name).toUpperCase()}</div>
                        <div class="file-status status-${fileObj.status}">
                            ${getStatusText(fileObj.status)}
                        </div>
                        ${fileObj.status === 'converting' ? `
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${fileObj.progress}%"></div>
                            </div>
                        ` : ''}
                    </div>
                    <div class="file-actions">
                        ${fileObj.status === 'success' ? `
                            <button class="action-btn" onclick="downloadFile(${index})">Download</button>
                        ` : ''}
                        <button class="action-btn remove" onclick="removeFile(${index})">Remove</button>
                    </div>
                `;
                fileList.appendChild(fileItem);
            });
        }

        function removeFile(index) {
            selectedFiles.splice(index, 1);
            updateFileList();
            updateConvertButton();
        }

        function updateConvertButton() {
            if (selectedFiles.length === 0) {
                convertButton.disabled = true;
                convertButtonText.textContent = 'Select Files to Convert';
            } else if (isConverting) {
                convertButton.disabled = true;
                convertButtonText.innerHTML = '<span class="loading"></span> Converting...';
            } else {
                convertButton.disabled = false;
                convertButtonText.textContent = `Convert ${selectedFiles.length} File${selectedFiles.length > 1 ? 's' : ''}`;
            }
        }

        function handleConvert() {
            if (selectedFiles.length === 0 || isConverting) return;
            
            isConverting = true;
            updateConvertButton();
            
            // Simulate conversion process
            selectedFiles.forEach((fileObj, index) => {
                fileObj.status = 'converting';
                fileObj.progress = 0;
                
                // Simulate progress
                const progressInterval = setInterval(() => {
                    fileObj.progress += Math.random() * 15;
                    if (fileObj.progress >= 100) {
                        fileObj.progress = 100;
                        fileObj.status = 'success';
                        clearInterval(progressInterval);
                        
                        // Check if all files are done
                        if (selectedFiles.every(f => f.status === 'success')) {
                            isConverting = false;
                            updateConvertButton();
                            showSuccessMessage();
                        }
                    }
                    updateFileList();
                }, 200 + Math.random() * 300);
            });
        }

        function downloadFile(index) {
            const fileObj = selectedFiles[index];
            // In a real app, this would download the converted file
            alert(`Downloading converted file: ${fileObj.name}`);
        }

        function getFileIcon(filename) {
            const ext = getFileExtension(filename);
            const iconMap = {
                jpg: '🖼️', jpeg: '🖼️', png: '🖼️', gif: '🖼️',
                pdf: '📄', doc: '📄', docx: '📄', txt: '📄',
                mp3: '🎵', wav: '🎵', flac: '🎵',
                mp4: '🎬', avi: '🎬', mov: '🎬',
                zip: '📦', rar: '📦', '7z': '📦',
                default: '📁'
            };
            return iconMap[ext] || iconMap.default;
        }

        function getFileExtension(filename) {
            return filename.split('.').pop().toLowerCase();
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function getStatusText(status) {
            const statusMap = {
                ready: '✓ Ready',
                converting: '⏳ Converting...',
                success: '✅ Complete',
                error: '❌ Error'
            };
            return statusMap[status] || status;
        }

        function setQuickConversion(from, to) {
            fromFormat.value = from;
            toFormat.value = to;
        }

        function showSuccessMessage() {
            const message = document.createElement('div');
            message.className = 'success-message';
            message.innerHTML = '🎉 All files converted successfully!';
            document.querySelector('.converter-section').appendChild(message);
            
            setTimeout(() => {
                message.remove();
            }, 5000);
        }

        // Animate file particles
        function animateFileParticles() {
            const particles